// lab_3.cpp : Defines the entry point for the console application.
//

#include "stdafx.h" 
#include <iostream>  
#include <bitset> 
#include <cmath>

/*Лабораторная работа № 3*/

int main()
{
	/*Операторы цикла условного перехода*/
	/* if - оператор условного перехода
	if (лог_усл)
	{
	код, выполняемый, если (лог_усл == true)
	}
	if (лог_усл)
	{
	// код, выполняемый, если лог_усл == true
	}
	else
	{
	// код, выполняемый в противном случае
	}

	Примеры: if(a>b){... ; bool c = ...; if(c) {...
	*/

	setlocale(LC_ALL, "Russian");
	std::cout << "Русский текст" << std::endl;
	int a = 10, b = 15, c = 15;
	if (a == b /*=true*/) // == - логический оператор сравнения,
						  // возвращает true, только если оба операнда равны 
						  // != - логический оператор, проверяющий неравенство 
						  // операндов, возвращает true, если операнды НЕ равны 
	{
		std::cout << "с == b" << std::endl; // a равно b 
	}
	else
	{
		std::cout << "a != b" << std::endl; // a НЕ равно b 
	}

	// тернарный оператор (лог_усл) ? (операторы если true, операторы если true) : (операторы, если false) 
	// также запись можно переносить на несколько строк 

	(c == b) ?
		(std::cout << "с == b" << std::endl)
		:
		(std::cout << "a != b" << std::endl);



	int d = -10;
	//пример с проверкой дискриминанта 
	(d == 0) ?
		(std::cout << "d == 0" << std::endl)
		:

		((d > 0) ?
		(std::cout << "d > 0" << std::endl)
			:
			(std::cout << "d < 0" << std::endl));

	/*
	switch - оператор условного перехода с несколькими вариантами
	switch(вариант1)
	{
	case (вариант1):
	// действия, выполняемые если выражение == вариант 1
	break;

	}
	default:
	{
	// действия, выполняемые, если ни одно выражение не подошло
	break;

	}
	}

	*/

	std::cout << std::endl;
	int page_number = 2; // 0 - стартовая страница, 
						 // 1 - страница сообщений, 
						 // 2 - страница новостей, 
						 // 3 - страница настроек 
						 // 4 - кнопка выход  
	switch (page_number)
	{
	case 0: // блок операторов можно писать без скобок 
		std::cout << "Start page" << std::endl;
		break;
	case 1:
	{
		std::cout << "Message page" << std::endl;
		break;
	}
	case 2:
		std::cout << "News page" << std::endl;
		break;
	case(3):
	{
		std::cout << "Settings page" << std::endl;
		break;
	}
	case 4: // для выхода 
	{
		std::cout << "Exit button" << std::endl;
	}
	case 5:
	{
		std::cout << "Data save" << std::endl;
		break;
	}
	case 6: // для выхода !  (неудачный пример)
	{
		std::cout << "Save button" << std::endl;
	}
	default:
	{
		std::cout << "Some another page" << std::endl;// действия, выполняемые, если ни одно выражение не подходит по условию
		break;
	}
	}

	// switch целесообразно применять, если число вариантов 3..5 
	// если вариантов больше, их следует задавать таблицей (массивом) 
	// и проверять таблицу на совпадение 


	// for - оператор цикла с отсчётом 
	// 
	// for(целочисл_переменная; условие_продолжения; повторяемое_действие) 
	// {
	// действия, повторяемые, пока (условие_продолжения == true) 
	//}	
	//

	std::cout << std::endl;

	// типичный случай: задают целую переменную-счётчик int i;
	// задают макс. значение (i , 10); 
	// задают возрастание/уменьшение i (i++) 
	int arr[10] = { 1, 10, 2, 9 ,3, 8, 4, 7, 5, 6 };
	for (int i = 0; i < 10; i++ /* другие варианты: i+=1 либо i = i + 1 */)
	{
		std::cout << "arr[i] = " << arr[i] << std::endl;
		// действия, повторяемые, пока i < 10
	}



	// ниже приведен равносильный оператор с пустыми круглыми скобками 
	int k = 0; // объявляем переменную-счётчик вне цикла 
	for (;;)
	{

		if (k >= 10)
		{
			break;
		}

		std::cout << "arr[k] = " << arr[k] << std::endl;
		k++;
	}

	std::cout << std::endl;
	// также возможен такой вариант 
	for (int i = 0, j = 5; //через "," можно перечислить сколько угодно операторов
		i + j < 10, j < 10; // ??? 
		i++, j = j + 2, std::cout << "i=" << '\t' << "j = " << j << std::endl) // через "," можно перечислить 
	{
		// действия, повторяемые, пока i + j < 10 
	}

	// области видимости переменных 
	int m = 15;
	for (int i = 0; i < 10; i++)
	{
		int l = 20;
		std::cout << "i = " << i << std::endl;
		std::cout << "m = " << m << std::endl;
		std::cout << "l = " << l << std::endl;
		l++;
		m--;
		//действия, повторяемые, пока i < 10 
	}
	//std::cout << "i = " << i << std::endl; // переменная цикла снаружи не видна (исчезает) 
	std::cout << "m = " << m << std::endl;
	//std::cout << "l = " << l << std::endl; // переменная цикла снаружи не видна (исчезает)


	// переменные, объявленные в фигурных и круглых скобках цикла видны только внутри цикла 
	// как только цикл закрывается, переменная и её содержимое не доступно 
	// кроме того, переменные, объявдленные в фигурных скобках, перезаписываются каждую итерацию 
	// то же самое относится и к других блокам кода. Если переменная объявляется внутри блока кода, то
	// она видна только внутри блока кода 
	std::cout << std::endl;


	// while (условие) - действия выполняются до тех пор, пока условие == true 
	// { условие проверяется ПЕРЕД каждым заходом в цикл 

	//}

	int rnd = 0.0;
	srand(100); // инициализация генератора случайных чисел 
	while (rnd < RAND_MAX * 3 / 4)
	{
		rnd = rand(); // случайные числа, однородно распределенные от 0 до RAND_MAX 
		std::cout << "rnd = " << rnd << std::endl;

		// оператор break тоже работает с while 
	}

	int l = 0;
	while (l < 100)
	{
		if (l == 5)
		{
			l++; // если перед следующей итерацией счетчик не увеличить, то будет бесконечный цикл 
			continue; // переход на следующую ИТЕРАЦИЮ  
		}
		if (l >= 10)
		{
			break; // ВЫХОД из цикла 
		}
		std::cout << "l = " << l << std::endl;
		l++;
	}

	// while - цикл с пред-условием, т.е. сначала проверяется условие, затем выполняется действие 

	// do-while - цикл с постусловием 
	// do 
	//{

	//}
	//while ()

	getchar();
	return 0;
}
